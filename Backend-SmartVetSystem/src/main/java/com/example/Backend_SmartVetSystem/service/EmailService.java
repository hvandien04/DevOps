package com.example.Backend_SmartVetSystem.service;

import com.sendgrid.*;
import com.sendgrid.helpers.mail.Mail;
import com.sendgrid.helpers.mail.objects.Content;
import com.sendgrid.helpers.mail.objects.Email;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import lombok.RequiredArgsConstructor;
import lombok.experimental.NonFinal;

import java.io.IOException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

@Service
@RequiredArgsConstructor
public class EmailService {

    @NonFinal
    @Value("${spring.sendgrid.api-key}")
    private String sendgridApiKey;

    @NonFinal
    @Value("${FROM_EMAIL}")
    private String fromEmail;

    public void sendResetCode(String toEmail, String code) throws IOException {
        if (fromEmail == null || fromEmail.isEmpty()) {
            throw new IOException("FROM_EMAIL not configured yet.");
        }

        Email from = new Email(fromEmail);
        String subject = "Password reset confirmation code";
        Email to = new Email(toEmail);
        String htmlContent = """
            <div style="font-family: Arial, sans-serif; font-size: 14px;">
                <p>Your code will expire in <strong>5 minutes</strong>.</p>
                <p>Your verification code is:</p>
                <p style="font-size: 24px; font-weight: bold; color: #2d3748;">%s</p>
            </div>
        """.formatted(code);

        Content content = new Content("text/html", htmlContent);

        Mail mail = new Mail(from, subject, to, content);

        SendGrid sg = new SendGrid(this.sendgridApiKey);
        Request request = new Request();

        request.setMethod(Method.POST);
        request.setEndpoint("mail/send");
        request.setBody(mail.build());
        sg.api(request);
    }


    public void sendAppointmentReminder(String toEmail, String appointmentTime) throws IOException {
        if (fromEmail == null || fromEmail.isEmpty()) {
            throw new IOException("FROM_EMAIL not configured yet.");
        }

        Instant time = Instant.parse(appointmentTime);
        String formatted = DateTimeFormatter.ofPattern("HH:mm 'ng√†y' dd/MM/yyyy")
                .withZone(ZoneId.of("UTC"))
                .format(time);

        String subject = "Nh·∫Øc l·ªãch h·∫πn kh√°m th√∫ y t·∫°i SmartVet";

        String htmlContent = """
        <div style="font-family: Arial, sans-serif; font-size: 14px; color: #333;">
            <p>K√≠nh g·ª≠i Qu√Ω kh√°ch,</p>
            <p>SmartVet xin g·ª≠i l·ªùi ch√†o tr√¢n tr·ªçng ƒë·∫øn Qu√Ω kh√°ch!</p>
            <p>H·ªá th·ªëng ghi nh·∫≠n Qu√Ω kh√°ch ƒë√£ ƒë·∫∑t l·ªãch h·∫πn kh√°m b·ªánh th√∫ y cho th√∫ c∆∞ng t·∫°i SmartVet. ƒê√¢y l√† email t·ª± ƒë·ªông nh·∫±m nh·∫Øc l·ªãch h·∫πn kh√°m nh∆∞ sau:</p>
            
            <p>üïí <strong>Th·ªùi gian kh√°m d·ª± ki·∫øn:</strong> %s<br>
            üè• <strong>ƒê·ªãa ƒëi·ªÉm:</strong> SmartVet ‚Äì 123 T√¥ K√Ω, Ph∆∞·ªùng T√¢n Ch√°nh Hi·ªáp, Qu·∫≠n 12, TP.HCM</p>
            
            <p>ƒê·ªÉ bu·ªïi kh√°m di·ªÖn ra thu·∫≠n l·ª£i, Qu√Ω kh√°ch vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù ho·∫∑c ƒë·∫øn s·ªõm 10 ph√∫t ƒë·ªÉ l√†m th·ªß t·ª•c. Trong tr∆∞·ªùng h·ª£p c·∫ßn h·ªó tr·ª£ ho·∫∑c thay ƒë·ªïi l·ªãch h·∫πn, xin li√™n h·ªá:</p>
            
            <p>üìû Hotline: 0909 123 456<br>
            üìß Email: support@smartvet.vn</p>

            <p>C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa SmartVet!<br>
            Ch√∫c th√∫ c∆∞ng c·ªßa b·∫°n lu√¥n kh·ªèe m·∫°nh v√† vui v·∫ª.</p>
            
            <p>Tr√¢n tr·ªçng,<br>
            <strong>ƒê·ªôi ng≈© SmartVet</strong></p>
        </div>
    """.formatted(formatted);

        Email from = new Email(fromEmail);
        Email to = new Email(toEmail);
        Content content = new Content("text/html", htmlContent);

        Mail mail = new Mail(from, subject, to, content);

        SendGrid sg = new SendGrid(this.sendgridApiKey);
        Request request = new Request();
        request.setMethod(Method.POST);
        request.setEndpoint("mail/send");
        request.setBody(mail.build());
        sg.api(request);
    }
}
